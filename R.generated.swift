//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `MainBlue`.
    static let mainBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainBlue")
    /// Color `textFieldColor`.
    static let textFieldColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "MainBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textFieldColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Kanit-SemiBold.ttf`.
    static let kanitSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Kanit-SemiBold", pathExtension: "ttf")
    /// Resource file `SF-Pro-Display-Bold.otf`.
    static let sfProDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Regular.otf`.
    static let sfProDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Kanit-SemiBold", withExtension: "ttf")`
    static func kanitSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kanitSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Bold", withExtension: "otf")`
    static func sfProDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Regular", withExtension: "otf")`
    static func sfProDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Kanit-SemiBold`.
    static let kanitSemiBold = Rswift.FontResource(fontName: "Kanit-SemiBold")
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")

    /// `UIFont(name: "Kanit-SemiBold", size: ...)`
    static func kanitSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitSemiBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.kanitSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-SemiBold' could not be loaded, is 'Kanit-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SF-Pro-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SF-Pro-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 66 images.
  struct image {
    /// Image `Bleach`.
    static let bleach = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bleach")
    /// Image `ChlorineBeach`.
    static let chlorineBeach = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChlorineBeach")
    /// Image `DoNotBleach2`.
    static let doNotBleach2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotBleach2")
    /// Image `DoNotBleach`.
    static let doNotBleach = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotBleach")
    /// Image `DoNotDryClean`.
    static let doNotDryClean = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotDryClean")
    /// Image `DoNotDry`.
    static let doNotDry = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotDry")
    /// Image `DoNotIron`.
    static let doNotIron = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotIron")
    /// Image `DoNotSteam`.
    static let doNotSteam = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotSteam")
    /// Image `DoNotTumbleDry`.
    static let doNotTumbleDry = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotTumbleDry")
    /// Image `DoNotWash`.
    static let doNotWash = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotWash")
    /// Image `DoNotWetClean`.
    static let doNotWetClean = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotWetClean")
    /// Image `DoNotWring`.
    static let doNotWring = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoNotWring")
    /// Image `DripDryInShade`.
    static let dripDryInShade = Rswift.ImageResource(bundle: R.hostingBundle, name: "DripDryInShade")
    /// Image `DripDry`.
    static let dripDry = Rswift.ImageResource(bundle: R.hostingBundle, name: "DripDry")
    /// Image `DryCleanAnySolvent`.
    static let dryCleanAnySolvent = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryCleanAnySolvent")
    /// Image `DryCleanHydrocarbonSolventOnly`.
    static let dryCleanHydrocarbonSolventOnly = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryCleanHydrocarbonSolventOnly")
    /// Image `DryCleanLowHeat`.
    static let dryCleanLowHeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryCleanLowHeat")
    /// Image `DryCleanNoHeat`.
    static let dryCleanNoHeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryCleanNoHeat")
    /// Image `DryCleanReducedMoisture`.
    static let dryCleanReducedMoisture = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryCleanReducedMoisture")
    /// Image `DryCleanShortCycle`.
    static let dryCleanShortCycle = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryCleanShortCycle")
    /// Image `DryCleanWithPCE`.
    static let dryCleanWithPCE = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryCleanWithPCE")
    /// Image `DryClean`.
    static let dryClean = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryClean")
    /// Image `DryFlatInShade`.
    static let dryFlatInShade = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryFlatInShade")
    /// Image `DryFlat`.
    static let dryFlat = Rswift.ImageResource(bundle: R.hostingBundle, name: "DryFlat")
    /// Image `GentleDryCleanHydrocarbonSolventOnly`.
    static let gentleDryCleanHydrocarbonSolventOnly = Rswift.ImageResource(bundle: R.hostingBundle, name: "GentleDryCleanHydrocarbonSolventOnly")
    /// Image `GentleDryCleanWithPCE`.
    static let gentleDryCleanWithPCE = Rswift.ImageResource(bundle: R.hostingBundle, name: "GentleDryCleanWithPCE")
    /// Image `GentleWetClean`.
    static let gentleWetClean = Rswift.ImageResource(bundle: R.hostingBundle, name: "GentleWetClean")
    /// Image `HandWash`.
    static let handWash = Rswift.ImageResource(bundle: R.hostingBundle, name: "HandWash")
    /// Image `IronHighTemp`.
    static let ironHighTemp = Rswift.ImageResource(bundle: R.hostingBundle, name: "IronHighTemp")
    /// Image `IronLowTemp`.
    static let ironLowTemp = Rswift.ImageResource(bundle: R.hostingBundle, name: "IronLowTemp")
    /// Image `IronMediumTemp`.
    static let ironMediumTemp = Rswift.ImageResource(bundle: R.hostingBundle, name: "IronMediumTemp")
    /// Image `Iron`.
    static let iron = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iron")
    /// Image `LineDryInShade`.
    static let lineDryInShade = Rswift.ImageResource(bundle: R.hostingBundle, name: "LineDryInShade")
    /// Image `LineDry`.
    static let lineDry = Rswift.ImageResource(bundle: R.hostingBundle, name: "LineDry")
    /// Image `MachineWashGentleCycle`.
    static let machineWashGentleCycle = Rswift.ImageResource(bundle: R.hostingBundle, name: "MachineWashGentleCycle")
    /// Image `MachineWashPermanentPress`.
    static let machineWashPermanentPress = Rswift.ImageResource(bundle: R.hostingBundle, name: "MachineWashPermanentPress")
    /// Image `NaturalDry`.
    static let naturalDry = Rswift.ImageResource(bundle: R.hostingBundle, name: "NaturalDry")
    /// Image `NonChlorineBleach2`.
    static let nonChlorineBleach2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NonChlorineBleach2")
    /// Image `NonChlorineBleach`.
    static let nonChlorineBleach = Rswift.ImageResource(bundle: R.hostingBundle, name: "NonChlorineBleach")
    /// Image `ShadeDry`.
    static let shadeDry = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShadeDry")
    /// Image `Steam`.
    static let steam = Rswift.ImageResource(bundle: R.hostingBundle, name: "Steam")
    /// Image `TumbleDryGentle`.
    static let tumbleDryGentle = Rswift.ImageResource(bundle: R.hostingBundle, name: "TumbleDryGentle")
    /// Image `TumbleDryHighHeat`.
    static let tumbleDryHighHeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "TumbleDryHighHeat")
    /// Image `TumbleDryLowHeat`.
    static let tumbleDryLowHeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "TumbleDryLowHeat")
    /// Image `TumbleDryMediumHeat`.
    static let tumbleDryMediumHeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "TumbleDryMediumHeat")
    /// Image `TumbleDryNoHeat`.
    static let tumbleDryNoHeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "TumbleDryNoHeat")
    /// Image `TumbleDryNormal`.
    static let tumbleDryNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "TumbleDryNormal")
    /// Image `TumbleDryVeryGentle`.
    static let tumbleDryVeryGentle = Rswift.ImageResource(bundle: R.hostingBundle, name: "TumbleDryVeryGentle")
    /// Image `VeryGentleDryCleanWithPCE`.
    static let veryGentleDryCleanWithPCE = Rswift.ImageResource(bundle: R.hostingBundle, name: "VeryGentleDryCleanWithPCE")
    /// Image `VeryGentleWetClean`.
    static let veryGentleWetClean = Rswift.ImageResource(bundle: R.hostingBundle, name: "VeryGentleWetClean")
    /// Image `WashAtOrBelow30`.
    static let washAtOrBelow30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WashAtOrBelow30")
    /// Image `WashAtOrBelow40`.
    static let washAtOrBelow40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WashAtOrBelow40")
    /// Image `WashAtOrBelow50`.
    static let washAtOrBelow50 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WashAtOrBelow50")
    /// Image `WashAtOrBelow60`.
    static let washAtOrBelow60 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WashAtOrBelow60")
    /// Image `WashAtOrBelow70`.
    static let washAtOrBelow70 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WashAtOrBelow70")
    /// Image `WashAtOrBelow95`.
    static let washAtOrBelow95 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WashAtOrBelow95")
    /// Image `Washing`.
    static let washing = Rswift.ImageResource(bundle: R.hostingBundle, name: "Washing")
    /// Image `WetClean`.
    static let wetClean = Rswift.ImageResource(bundle: R.hostingBundle, name: "WetClean")
    /// Image `Wring`.
    static let wring = Rswift.ImageResource(bundle: R.hostingBundle, name: "Wring")
    /// Image `eyeClosed`.
    static let eyeClosed = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeClosed")
    /// Image `eyeOpened`.
    static let eyeOpened = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeOpened")
    /// Image `homeImage`.
    static let homeImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeImage")
    /// Image `leftArrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "leftArrow")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `profileImage`.
    static let profileImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileImage")
    /// Image `questionImage`.
    static let questionImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "questionImage")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bleach", bundle: ..., traitCollection: ...)`
    static func bleach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bleach, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ChlorineBeach", bundle: ..., traitCollection: ...)`
    static func chlorineBeach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chlorineBeach, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotBleach", bundle: ..., traitCollection: ...)`
    static func doNotBleach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotBleach, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotBleach2", bundle: ..., traitCollection: ...)`
    static func doNotBleach2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotBleach2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotDry", bundle: ..., traitCollection: ...)`
    static func doNotDry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotDry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotDryClean", bundle: ..., traitCollection: ...)`
    static func doNotDryClean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotDryClean, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotIron", bundle: ..., traitCollection: ...)`
    static func doNotIron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotIron, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotSteam", bundle: ..., traitCollection: ...)`
    static func doNotSteam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotSteam, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotTumbleDry", bundle: ..., traitCollection: ...)`
    static func doNotTumbleDry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotTumbleDry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotWash", bundle: ..., traitCollection: ...)`
    static func doNotWash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotWash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotWetClean", bundle: ..., traitCollection: ...)`
    static func doNotWetClean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotWetClean, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DoNotWring", bundle: ..., traitCollection: ...)`
    static func doNotWring(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doNotWring, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DripDry", bundle: ..., traitCollection: ...)`
    static func dripDry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dripDry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DripDryInShade", bundle: ..., traitCollection: ...)`
    static func dripDryInShade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dripDryInShade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryClean", bundle: ..., traitCollection: ...)`
    static func dryClean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryClean, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryCleanAnySolvent", bundle: ..., traitCollection: ...)`
    static func dryCleanAnySolvent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryCleanAnySolvent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryCleanHydrocarbonSolventOnly", bundle: ..., traitCollection: ...)`
    static func dryCleanHydrocarbonSolventOnly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryCleanHydrocarbonSolventOnly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryCleanLowHeat", bundle: ..., traitCollection: ...)`
    static func dryCleanLowHeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryCleanLowHeat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryCleanNoHeat", bundle: ..., traitCollection: ...)`
    static func dryCleanNoHeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryCleanNoHeat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryCleanReducedMoisture", bundle: ..., traitCollection: ...)`
    static func dryCleanReducedMoisture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryCleanReducedMoisture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryCleanShortCycle", bundle: ..., traitCollection: ...)`
    static func dryCleanShortCycle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryCleanShortCycle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryCleanWithPCE", bundle: ..., traitCollection: ...)`
    static func dryCleanWithPCE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryCleanWithPCE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryFlat", bundle: ..., traitCollection: ...)`
    static func dryFlat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryFlat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DryFlatInShade", bundle: ..., traitCollection: ...)`
    static func dryFlatInShade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dryFlatInShade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GentleDryCleanHydrocarbonSolventOnly", bundle: ..., traitCollection: ...)`
    static func gentleDryCleanHydrocarbonSolventOnly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gentleDryCleanHydrocarbonSolventOnly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GentleDryCleanWithPCE", bundle: ..., traitCollection: ...)`
    static func gentleDryCleanWithPCE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gentleDryCleanWithPCE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GentleWetClean", bundle: ..., traitCollection: ...)`
    static func gentleWetClean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gentleWetClean, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HandWash", bundle: ..., traitCollection: ...)`
    static func handWash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.handWash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iron", bundle: ..., traitCollection: ...)`
    static func iron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iron, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IronHighTemp", bundle: ..., traitCollection: ...)`
    static func ironHighTemp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ironHighTemp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IronLowTemp", bundle: ..., traitCollection: ...)`
    static func ironLowTemp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ironLowTemp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IronMediumTemp", bundle: ..., traitCollection: ...)`
    static func ironMediumTemp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ironMediumTemp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LineDry", bundle: ..., traitCollection: ...)`
    static func lineDry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineDry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LineDryInShade", bundle: ..., traitCollection: ...)`
    static func lineDryInShade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineDryInShade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MachineWashGentleCycle", bundle: ..., traitCollection: ...)`
    static func machineWashGentleCycle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.machineWashGentleCycle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MachineWashPermanentPress", bundle: ..., traitCollection: ...)`
    static func machineWashPermanentPress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.machineWashPermanentPress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NaturalDry", bundle: ..., traitCollection: ...)`
    static func naturalDry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.naturalDry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NonChlorineBleach", bundle: ..., traitCollection: ...)`
    static func nonChlorineBleach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nonChlorineBleach, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NonChlorineBleach2", bundle: ..., traitCollection: ...)`
    static func nonChlorineBleach2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nonChlorineBleach2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShadeDry", bundle: ..., traitCollection: ...)`
    static func shadeDry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadeDry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Steam", bundle: ..., traitCollection: ...)`
    static func steam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.steam, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TumbleDryGentle", bundle: ..., traitCollection: ...)`
    static func tumbleDryGentle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tumbleDryGentle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TumbleDryHighHeat", bundle: ..., traitCollection: ...)`
    static func tumbleDryHighHeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tumbleDryHighHeat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TumbleDryLowHeat", bundle: ..., traitCollection: ...)`
    static func tumbleDryLowHeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tumbleDryLowHeat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TumbleDryMediumHeat", bundle: ..., traitCollection: ...)`
    static func tumbleDryMediumHeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tumbleDryMediumHeat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TumbleDryNoHeat", bundle: ..., traitCollection: ...)`
    static func tumbleDryNoHeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tumbleDryNoHeat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TumbleDryNormal", bundle: ..., traitCollection: ...)`
    static func tumbleDryNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tumbleDryNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TumbleDryVeryGentle", bundle: ..., traitCollection: ...)`
    static func tumbleDryVeryGentle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tumbleDryVeryGentle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VeryGentleDryCleanWithPCE", bundle: ..., traitCollection: ...)`
    static func veryGentleDryCleanWithPCE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.veryGentleDryCleanWithPCE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VeryGentleWetClean", bundle: ..., traitCollection: ...)`
    static func veryGentleWetClean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.veryGentleWetClean, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WashAtOrBelow30", bundle: ..., traitCollection: ...)`
    static func washAtOrBelow30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.washAtOrBelow30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WashAtOrBelow40", bundle: ..., traitCollection: ...)`
    static func washAtOrBelow40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.washAtOrBelow40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WashAtOrBelow50", bundle: ..., traitCollection: ...)`
    static func washAtOrBelow50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.washAtOrBelow50, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WashAtOrBelow60", bundle: ..., traitCollection: ...)`
    static func washAtOrBelow60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.washAtOrBelow60, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WashAtOrBelow70", bundle: ..., traitCollection: ...)`
    static func washAtOrBelow70(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.washAtOrBelow70, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WashAtOrBelow95", bundle: ..., traitCollection: ...)`
    static func washAtOrBelow95(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.washAtOrBelow95, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Washing", bundle: ..., traitCollection: ...)`
    static func washing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.washing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WetClean", bundle: ..., traitCollection: ...)`
    static func wetClean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wetClean, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Wring", bundle: ..., traitCollection: ...)`
    static func wring(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wring, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeClosed", bundle: ..., traitCollection: ...)`
    static func eyeClosed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeClosed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeOpened", bundle: ..., traitCollection: ...)`
    static func eyeOpened(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeOpened, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeImage", bundle: ..., traitCollection: ...)`
    static func homeImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "leftArrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileImage", bundle: ..., traitCollection: ...)`
    static func profileImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "questionImage", bundle: ..., traitCollection: ...)`
    static func questionImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.questionImage, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController

      let bundle = R.hostingBundle
      let homePage = StoryboardViewControllerResource<HomePageViewController>(identifier: "HomePage")
      let name = "Main"
      let registerViewControllerIdentifier = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewControllerIdentifier")
      let tabBarVC = StoryboardViewControllerResource<TabBarController>(identifier: "TabBarVC")

      func homePage(_: Void = ()) -> HomePageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homePage)
      }

      func registerViewControllerIdentifier(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewControllerIdentifier)
      }

      func tabBarVC(_: Void = ()) -> TabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().homePage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homePage' could not be loaded from storyboard 'Main' as 'HomePageViewController'.") }
        if _R.storyboard.main().registerViewControllerIdentifier() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewControllerIdentifier' could not be loaded from storyboard 'Main' as 'RegisterViewController'.") }
        if _R.storyboard.main().tabBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarVC' could not be loaded from storyboard 'Main' as 'TabBarController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
